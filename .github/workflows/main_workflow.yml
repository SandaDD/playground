# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  job1: #<- job ID
    runs-on: ubuntu-latest
    outputs: #declaring output(s) for specific job
      output: ${{ steps.step1.outputs.test }}
    steps:
      - name: step 1 
        id: step1 
        # {name}={value} >> "$GITHUB_OUTPUT"
        run: |
          echo "test=hello" >> "$GITHUB_OUTPUT" 
          echo "test2=hello2" >> "$GITHUB_OUTPUT" 
      - name: step 2
        id: step2
        run: echo ${{ steps.step1.outputs.test2 }}

  job2:
    runs-on: ubuntu-latest
    needs: job1
    env:
      RESULT: ${{needs.job1.result}}
      OUTPUT: ${{needs.job1.outputs.output}}
    steps:
      - name: Use output value from job1
        id: step3 # <- step ID
        # Possible values are success, failure, cancelled, or skipped. 
        # Also GitHub automatically evaluates the if conditional as an expression .
        if: env.RESULT=='success' 
        run: |
          echo "$OUTPUT $RESULT"
          echo "message=Input for the next step" >> $GITHUB_OUTPUT
      - name: Use value from the previous step
        env:
          OUTPUT2: ${{steps.step3.outputs.message}}
        run: echo "$OUTPUT2"

  example_matrix:
    runs-on: ubuntu-latest
    outputs:
      output: ${{steps.step5.outputs.matrix}}
    strategy:
      matrix:
        who-to-greet: [Ivo, MiÅ¡ko, Pero]
    steps:
      - uses: actions/hello-world-javascript-action@main
        id: step4
        with:
          who-to-greet: ${{ matrix.who-to-greet}}
      - name: Output matrix
        id: step5
        run: echo "matrix=${{ (matrix.who-to-greet)}}" >> $GITHUB_OUTPUT
        
  load_JSON_from_a_file:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - id: set_var
    # for multi-line json file "json<<EOF"$'\n'"$JSON"$'\n'EOF
      run: |
        content=`cat test.json`
        content="${content//'%'/'%25'}"
        content="${content//$'\r'/'%0D'}"
        content="${content//$'\n'/'%0A'}"
        echo "::set-output name=packageJson::$content"
    - run: |
        echo "${{fromJson(steps.set_var.outputs.packageJson).port}}"
 
  job3:
    runs-on: ubuntu-latest
    env:
      continue: false
    steps:
      - if: ${{ fromJson(env.continue) }}
        run: echo "We use fromJSON to convert env variable from a string to a Boolean"




  test_new_env:
    needs: example_matrix
    runs-on: ubuntu-latest
    environment: dev-env
    env:
      NAMES: ${{ (needs.example_matrix.outputs.output)}}
    steps:
      - name: echo env variable name and context values
        env: 
          ENV_VAR: ${{ (vars.DUMMY_VALUE) }}
        run: | 
          echo "$ENV_VAR"
          echo "$NAMES"
      

  login:
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          s
 
 
  call_reusable_workflow:
    uses: ./.github/workflows/reusable_workflow.yml
    with: 
      label: "test, self-hosted"





  print_out_job_context:
    runs-on: ubuntu-latest
    steps:
      - name: Print out job context
        run: echo "${{ toJSON(job)}}"


  generate_labels:
    name: Generate  labels
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.set-up-labels.outputs.labels_for_the_next_job }}
    env:
      LABELS: "ubuntu-latest, test"
    steps:
        - name: Set up label list
          id: set-up-labels
          run: echo "labels_for_the_next_job=self-hosted, test" >> $GITHUB_OUTPUT

  consume_labels:
    name: Use labels from previous job
    runs-on: ubuntu-latest 
    needs: generate_labels
    steps:
      - name: Create list from array of strings
        id: arrytolist
        uses: lucaspinheirogit/list-from-string-array-action@v1.4.3
        with:
          stringArray: '["self-hosted","test"]'
      - name: Print modified files
        run: echo '${{ steps.arrytolist.outputs.stringList }}'
      - name: Print out labels as a list
        env: 
          lab: '${{toJSON(needs.generate_labels.outputs.labels)}}'
        run: |
          echo "${{fromJSON(toJSON(needs.generate_labels.outputs.labels))}}"
          echo '${{fromJSON(toJSON(needs.generate_labels.outputs)).labels}}'
          echo "${{fromJSON(toJSON(needs.generate_labels.outputs)).labels}}"
          echo "${{needs.generate_labels.outputs.labels}}"
          echo "${{toJSON(needs.generate_labels.outputs.labels)}}"
          echo "$lab"
          echo '$lab'
  


    
 
